capitalize() - Converts the first character to upper case
  string.capitalize()
  
casefold() - Converts string into lower case
    string.casefold()
    This method is similar to the lower() method, but the casefold() method is stronger, more aggressive, meaning that it will convert more 
    characters into lower case, and will find more matches when comparing two strings and both are converted using the casefold() method.
    
center() - Returns a centered string, 2nd argument isnt needed but deafults to spaces if not used. 
    string.center(length, character)
    length - required
    character - nr, default spaces
    
count()	- Returns the number of times a specified value occurs in a string
    string.count(value, start, end)
    value - needed 
    start - default is 0 
    end - default is end of string

encode() - Returns an encoded version of the string
    string.encode(encoding=encoding, errors=errors)
    encoding = optional, default is UTF-8 
    errors - specifying error method 
      legal values
        'backslashreplace'	- uses a backslash instead of the character that could not be encoded
        'ignore'	- ignores the characters that cannot be encoded
        'namereplace'	- replaces the character with a text explaining the character
        'strict'	- Default, raises an error on failure
        'replace'	- replaces the character with a questionmark
        'xmlcharrefreplace'	- replaces the character with an xml character
      
endswith() - Returns true if the string ends with the specified value
    string.endswith(value, start, end)
    
expandtabs()	- Sets the tab size of the string
    string.expandtabs(tabsize)
    default tabsize is 8 
    txt = "H\te\tl\tl\to"
    print(txt.expandtab(#))
   

find()	- Searches the string for a specified value and returns the position of where it was found
    string.find(value, start, end)
    returns -1 if not found
    almost the same as index(), index() raises and exception if the value is not found. 

format()	- Formats specified values in a string
    string.format(value1, value2...)
        named index -  txt1 = "My name is {fname}, I'm {age}".format(fname = "John", age = 36)
        numbered index - txt2 = "My name is {0}, I'm {1}".format("John",36)
        empty placeholders - txt3 = "My name is {}, I'm {}".format("John",36)
    inside of placeholders - add a formatting type.
      :< - left aligns the result (within the available space)
      :> - right align results (within available space)
      :^ - Center align the result 
      := - places the sign to the leftmost position 
      :+ - use a plus sign to indicate if the result is positive or negative
      :- - use a minus sign for negative values only
      :  - use a space to insert an extra space before positive numbers (and a minus sign before      negative numbers)
      :, - use a comma as a thousand separator
      :_ - use an underscore as a thousand separator
      :b - binary format
      :c - converts the value into the corresponding unicode character
      :d - decimal format 
      :e - scientific format, with a lowercase e
      :E - scientific format with an upper case E
      :f - fix point number format 
      :F - fix point number format, in uppercase format (show inf and nan as INF and NAN)
      :g - general format
      :G - general format (using a upper case E for scientific notation)
      :o - octal format 
      :x - hex format lower case
      :X - hex format upper case
      :n - number format 
      :% - percentage format 
         
*** format_map()	- Formats specified values in a string

index()	- Searches the string for a specified value and returns the position of where it was found
    string.index(value, start, end)
    The index() method raises an exception if the value is not found.
    The index() method is almost the same as the find() method, the only difference is that the find() method returns -1 if the value is not found.  

isalnum()	- Returns True if all characters in the string are alphanumeric.
    string.isalnum()
    a-z 
    0-9
    not alphanumeric - spaces, !#%&? etc

isalpha()	- Returns True if all characters in the string are in the alphabet
    string.isalpha()
    a-z
    
isdecimal()	- Returns True if all characters in the string are decimals
    string.isdecimal()
    0-9
    used on unicode objects
        a = "\u0030" #unicode for 0
        b = "\u0047" #unicode for G

 
isdigit()	- Returns True if all characters in the string are digits
    string.isdigit()
    exponents are also considereddigits
    
isidentifier()	- Returns True if the string is an identifier
    string.isidentifier()
    valid identifier if 
        a-z
        0-9
        underscores
        cannot start with a number or contain any spaces

islower()	- Returns True if all characters in the string are lower case
    string.islower()
    numbers, symbols, spaces are not checked, only alphabet characters
    
isnumeric()	- Returns True if all characters in the string are numeric
    string.isnumeric()
    0-9 only
    exponents are also considered to be numeric

isprintable()	- Returns True if all characters in the string are printable
    string.isprintable()
    non printable - carriage returns and line feed
    
isspace()	- Returns True if all characters in the string are whitespaces
    string.isspace()

istitle()	- Returns True if the string follows the rules of a title
    string.istitle()
    all words in a text start with an uppercase letter AND the rest of the word is lowercase

isupper()	- Returns True if all characters in the string are upper case
    string.isupper()
    numbers, symbols and spaces are not checked, only alphabet characters
    
join()	- Joins the elements of an iterable to the end of the string
    string.join(iterable)
        myDict = {"name": "John", "country": "Norway"}
        mySeparator = "TEST"

        x = mySeparator.join(myDict)
    
ljust()	- Returns a left justified version of the string
    string.ljust(length, character)
    length - required - the length of the returned string
    character - optional - character to fill the missing space (to the right of the string)
        default is space

lower()	- Converts a string into lower case
    string.lower()
    symbols and numbers are ignored
    
lstrip()	- Returns a left trim version of the string
    string.lstrip(characters)
    x = txt.lstrip(",.asw")
    default is spaces

maketrans()	- Returns a translation table to be used in translations
    string.maketrans(x, y, z)
    x - required - if only one parameter - has to be a dictionary describing how to perform the replace
                   if two or more parameters - has to be a string specifying the characters you want to replace
    y - optional - string with the same length as x, each character in the first parameter will be replaced with the corresponding character in this string
    z - optional - a string describing which characters to remove from the original string.
        txt = "Hi Sam!";
        x = "mSa";
        y = "eJo";
        mytable = txt.maketrans(x, y);
        print(txt.translate(mytable));
            txt = "Good night Sam!";
            x = "mSa";
            y = "eJo";
            z = "odnght";
            mytable = txt.maketrans(x, y, z);
            print(txt.translate(mytable));
        The maketrans() method itself returns a dictionary describing each replacement, in unicode:
            txt = "Good night Sam!";
            x = "mSa";
            y = "eJo";
            z = "odnght";
            print(txt.maketrans(x, y, z));
        
partition()	- Returns a tuple where the string is parted into three parts
    string.partition(value)
    1st - before the specified string
    2nd - contains the specified string
    3rd - after the string
        if value is not found, returns a touple cotaining 1 the whole string, 2 - empty string, 3 - empty string
        
replace()	- Returns a string where a specified value is replaced with a specified value
    string.replace(oldvalue, newvalue, count)
    oldvalue - required - string to search for
    newvalue - required - straing to replace old with 
    count - optional - a number specifying how many occurences of the old value you want to duplicate. 
        default is all occurences

rfind()	- Searches the string for a specified value and returns the last position of where it was found
    string.rfind(value, start, end)
    finds the last occurence of specified value
    returns -1 if not found
    almost the same as rindex() but does not raise an error
        value - required, value to search for
        start - where to start, default is 0 
        end - optional, where to end the search, default is end

rindex() - Searches the string for a specified value and returns the last position of where it was found
    same as rfind() but raises an error when value is not found

rjust()	- Returns a right justified version of the string
    string.rjust(length, character)
    length - required - length of the returned string
    character - optional - fills missing space to the left of the string, default is space

rpartition()	- Returns a tuple where the string is parted into three parts
    last occurence of the value
    1 - everything before the match 
    2 - the match
    3 - everything after the match

rsplit()	- Splits the string at the specified separator, and returns a list
    string.rsplit(separator, maxsplit)
    separator - optional - default is whitespace separator
    maxsplit - optional - how many splits to do, default is -1 which is all occurences
        # setting the maxsplit parameter to 1, will return a list with 2 elements!
        x = txt.rsplit(", ", 1)

rstrip()	- Returns a right trim version of the string
    string.rstrip(characters)
    default is spaces

split()	- Splits the string at the specified separator, and returns a list
    string.split(separator, maxsplit)
    separator - optional - default is whitespace
    maxsplit - optional - default is -1 which is all occurences

splitlines()	- Splits the string at line breaks and returns a list
    string.splitlines(keeplinebreaks)
    keeplinebreaks - optional - specifies if linebreaks should be included (True) or not included (False)
    default is false

startswith()	- Returns true if the string starts with the specified value
    string.startswith(value, start, end)
    value - required - value to check if the string starts with
    start - which position to start the search
    end - optional an integer specifying which position to end the search

strip()	- Returns a trimmed version of the string
    string.strip(characters)
    characters - optional - characters to remove from the leading/trailing edges 
    default is spaces

swapcase()	- Swaps cases, lower case becomes upper case and vice versa
    string.swapcase()

title()	- Converts the first character of each word to upper case
    string.title()

translate()	- Returns a translated string
    string.translate(table)
    table - required - either a dictionary or a mapping table describing how to perform the replace
    use maketrans() method to create a mapping table
    
upper()	- Converts a string into upper case
    string.upper()
    symbols and numbers are ignored

zfill()	- Fills the string with a specified number of 0 values at the beginning
    string.zfill(len)
    len - required - number specifying the position of the element you want to remove
        if the value of the len parameter is less than the length of the string, no filling is done. 
        
    

