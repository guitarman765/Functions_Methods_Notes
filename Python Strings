capitalize() - Converts the first character to upper case
  string.capitalize()
  
casefold() - Converts string into lower case
    string.casefold()
    This method is similar to the lower() method, but the casefold() method is stronger, more aggressive, meaning that it will convert more 
    characters into lower case, and will find more matches when comparing two strings and both are converted using the casefold() method.
    
center() - Returns a centered string, 2nd argument isnt needed but deafults to spaces if not used. 
    string.center(length, character)
    length - required
    character - nr, default spaces
    
count()	- Returns the number of times a specified value occurs in a string
    string.count(value, start, end)
    value - needed 
    start - default is 0 
    end - default is end of string

encode() - Returns an encoded version of the string
    string.encode(encoding=encoding, errors=errors)
    encoding = optional, default is UTF-8 
    errors - specifying error method 
      legal values
        'backslashreplace'	- uses a backslash instead of the character that could not be encoded
        'ignore'	- ignores the characters that cannot be encoded
        'namereplace'	- replaces the character with a text explaining the character
        'strict'	- Default, raises an error on failure
        'replace'	- replaces the character with a questionmark
        'xmlcharrefreplace'	- replaces the character with an xml character
      
endswith() - Returns true if the string ends with the specified value
    string.endswith(value, start, end)
    
expandtabs()	- Sets the tab size of the string
    string.expandtabs(tabsize)
    default tabsize is 8 
    txt = "H\te\tl\tl\to"
    print(txt.expandtab(#))
   

find()	- Searches the string for a specified value and returns the position of where it was found
    string.find(value, start, end)
    returns -1 if not found
    almost the same as index(), index() raises and exception if the value is not found. 

format()	- Formats specified values in a string
    string.format(value1, value2...)
        named index -  txt1 = "My name is {fname}, I'm {age}".format(fname = "John", age = 36)
        numbered index - txt2 = "My name is {0}, I'm {1}".format("John",36)
        empty placeholders - txt3 = "My name is {}, I'm {}".format("John",36)
    inside of placeholders - add a formatting type.
      :< - left aligns the result (within the available space)
      :> - right align results (within available space)
      :^ - Center align the result 
      := - places the sign to the leftmost position 
      :+ - use a plus sign to indicate if the result is positive or negative
      :- - use a minus sign for negative values only
      :  - use a space to insert an extra space before positive numbers (and a minus sign before      negative numbers)
      :, - use a comma as a thousand separator
      :_ - use an underscore as a thousand separator
      :b - binary format
      :c - converts the value into the corresponding unicode character
      :d - decimal format 
      :e - scientific format, with a lowercase e
      :E - scientific format with an upper case E
      :f - fix point number format 
      :F - fix point number format, in uppercase format (show inf and nan as INF and NAN)
      :g - general format
      :G - general format (using a upper case E for scientific notation)
      :o - octal format 
      :x - hex format lower case
      :X - hex format upper case
      :n - number format 
      :% - percentage format 
         
*** format_map()	- Formats specified values in a string

index()	- Searches the string for a specified value and returns the position of where it was found
    string.index(value, start, end)
    The index() method raises an exception if the value is not found.
    The index() method is almost the same as the find() method, the only difference is that the find() method returns -1 if the value is not found.  

isalnum()	- Returns True if all characters in the string are alphanumeric.
    string.isalnum()
    a-z 
    0-9
    not alphanumeric - spaces, !#%&? etc

isalpha()	- Returns True if all characters in the string are in the alphabet
    string.isalpha()
    a-z
    
isdecimal()	- Returns True if all characters in the string are decimals
    string.isdecimal()
    0-9
    used on unicode objects
        a = "\u0030" #unicode for 0
        b = "\u0047" #unicode for G

 
isdigit()	- Returns True if all characters in the string are digits
    string.isdigit()
    exponents are also considereddigits
    
isidentifier()	- Returns True if the string is an identifier
    string.isidentifier()
    valid identifier if 
        a-z
        0-9
        underscores
        cannot start with a number or contain any spaces

islower()	- Returns True if all characters in the string are lower case
    string.islower()
    numbers, symbols, spaces are not checked, only alphabet characters
    
isnumeric()	- Returns True if all characters in the string are numeric
    string.isnumeric()
    0-9 only
    exponents are also considered to be numeric

isprintable()	- Returns True if all characters in the string are printable
    string.isprintable()
    non printable - carriage returns and line feed
    
isspace()	- Returns True if all characters in the string are whitespaces
    string.isspace()

istitle()	- Returns True if the string follows the rules of a title
    string.istitle()
    all words in a text start with an uppercase letter AND the rest of the word is lowercase

isupper()	- Returns True if all characters in the string are upper case
    string.isupper()
    numbers, symbols and spaces are not checked, only alphabet characters
    
join()	- Joins the elements of an iterable to the end of the string
    string.join(iterable)
        myDict = {"name": "John", "country": "Norway"}
        mySeparator = "TEST"

        x = mySeparator.join(myDict)
    
ljust()	Returns a left justified version of the string
lower()	Converts a string into lower case
lstrip()	Returns a left trim version of the string
maketrans()	Returns a translation table to be used in translations
partition()	Returns a tuple where the string is parted into three parts
replace()	Returns a string where a specified value is replaced with a specified value
rfind()	Searches the string for a specified value and returns the last position of where it was found
rindex()	Searches the string for a specified value and returns the last position of where it was found
rjust()	Returns a right justified version of the string
rpartition()	Returns a tuple where the string is parted into three parts
rsplit()	Splits the string at the specified separator, and returns a list
rstrip()	Returns a right trim version of the string
split()	Splits the string at the specified separator, and returns a list
splitlines()	Splits the string at line breaks and returns a list
startswith()	Returns true if the string starts with the specified value
strip()	Returns a trimmed version of the string
swapcase()	Swaps cases, lower case becomes upper case and vice versa
title()	Converts the first character of each word to upper case
translate()	Returns a translated string
upper()	Converts a string into upper case
zfill()	Fills the string with a specified number of 0 values at the beginning
